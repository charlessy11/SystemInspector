<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="procfs_8h" kind="file" language="C++">
    <compoundname>procfs.h</compoundname>
    <includes local="no">sys/types.h</includes>
    <includedby refid="display_8c" local="yes">display.c</includedby>
    <includedby refid="procfs_8c" local="yes">procfs.c</includedby>
    <incdepgraph>
      <node id="2">
        <label>sys/types.h</label>
      </node>
      <node id="1">
        <label>procfs.h</label>
        <link refid="procfs_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structload__avg" prot="public">load_avg</innerclass>
    <innerclass refid="structcpu__stats" prot="public">cpu_stats</innerclass>
    <innerclass refid="structmem__stats" prot="public">mem_stats</innerclass>
    <innerclass refid="structtask__stats" prot="public">task_stats</innerclass>
    <innerclass refid="structtask__info" prot="public">task_info</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="procfs_8h_1acb1112f87eb6d7023b4bc2adccebb75e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pfs_hostname</definition>
        <argsstring>(char *proc_dir, char *hostname_buf, size_t buf_sz)</argsstring>
        <name>pfs_hostname</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>hostname_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves hostname of the machine</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>the location of procfs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hostname_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>stores the hostname </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_sz</parametername>
</parameternamelist>
<parameterdescription>
<para>buf_sz size</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success, -1 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="71" column="5" bodyfile="procfs.c" bodystart="20" bodyend="37" declfile="procfs.h" declline="71" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="procfs_8h_1aa2daa2378b2816f378f7d8d1cad39371" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pfs_kernel_version</definition>
        <argsstring>(char *proc_dir, char *version_buf, size_t buf_sz)</argsstring>
        <name>pfs_kernel_version</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>version_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves kernel version of the machine</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>the location of procfs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>version_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>stores the kernel version </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_sz</parametername>
</parameternamelist>
<parameterdescription>
<para>buf_sz size</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success, -1 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="82" column="5" bodyfile="procfs.c" bodystart="39" bodyend="58" declfile="procfs.h" declline="82" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="procfs_8h_1aa9d05ac622f7322719bbcf8302c682ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pfs_cpu_model</definition>
        <argsstring>(char *proc_dir, char *model_buf, size_t buf_sz)</argsstring>
        <name>pfs_cpu_model</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>model_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves cpu model name of the machine</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>the location of procfs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>stores the cpu model name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_sz</parametername>
</parameternamelist>
<parameterdescription>
<para>buf_sz size</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success, -1 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="93" column="5" bodyfile="procfs.c" bodystart="60" bodyend="83" declfile="procfs.h" declline="93" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="procfs_8h_1a9b207290dee3e4fc725a6800ab2813d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pfs_cpu_units</definition>
        <argsstring>(char *proc_dir)</argsstring>
        <name>pfs_cpu_units</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sums the number of processing units of the machine</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>the location of procfs</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>counter the sum of processing units </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="102" column="5" bodyfile="procfs.c" bodystart="85" bodyend="105" declfile="procfs.h" declline="102" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="procfs_8h_1a22f70e07728198887b6f062716183058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pfs_uptime</definition>
        <argsstring>(char *proc_dir)</argsstring>
        <name>pfs_uptime</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves uptime(in seconds) of the machine</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>the location of procfs</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>time the amount of uptime </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="111" column="8" bodyfile="procfs.c" bodystart="107" bodyend="125" declfile="procfs.h" declline="111" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="procfs_8h_1a2b539d023054cb32a82cc19e9fe1d977" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pfs_format_uptime</definition>
        <argsstring>(double time, char *uptime_buf)</argsstring>
        <name>pfs_format_uptime</name>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>uptime_buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Formats uptime(in seconds) to days, hours, minutes, and seconds</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>the uptime(in seconds) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uptime_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>stores the formatted uptime</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="121" column="5" bodyfile="procfs.c" bodystart="127" bodyend="162" declfile="procfs.h" declline="121" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="procfs_8h_1ad7cd36585e7dc0dd239d622c60e1df69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structload__avg" kindref="compound">load_avg</ref></type>
        <definition>struct load_avg pfs_load_avg</definition>
        <argsstring>(char *proc_dir)</argsstring>
        <name>pfs_load_avg</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves load average of the machine</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>the location of procfs</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>lavg the load average </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="121" column="5" bodyfile="procfs.c" bodystart="164" bodyend="190" declfile="procfs.h" declline="121" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="procfs_8h_1a866cac2f8014b4c83f23243ab0e01ab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pfs_cpu_usage</definition>
        <argsstring>(char *procfs_dir, struct cpu_stats *prev, struct cpu_stats *curr)</argsstring>
        <name>pfs_cpu_usage</name>
        <param>
          <type>char *</type>
          <declname>procfs_dir</declname>
        </param>
        <param>
          <type>struct <ref refid="structcpu__stats" kindref="compound">cpu_stats</ref> *</type>
          <declname>prev</declname>
        </param>
        <param>
          <type>struct <ref refid="structcpu__stats" kindref="compound">cpu_stats</ref> *</type>
          <declname>curr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves cpu usage of the machine</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>procfs_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>the location of procfs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="structcpu__stats" kindref="compound">cpu_stats</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>*prev input that represents the last CPU usage state </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="structcpu__stats" kindref="compound">cpu_stats</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>*curr output that represents the current CPU usage state, and will be passed back in to pfs_load_avg on its next call</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cpu_usage the cpu usage </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="142" column="8" bodyfile="procfs.c" bodystart="192" bodyend="243" declfile="procfs.h" declline="142" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="procfs_8h_1a6cde96a5ca78eb0d37fb4c8da3c7e0b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structmem__stats" kindref="compound">mem_stats</ref></type>
        <definition>struct mem_stats pfs_mem_usage</definition>
        <argsstring>(char *procfs_dir)</argsstring>
        <name>pfs_mem_usage</name>
        <param>
          <type>char *</type>
          <declname>procfs_dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves memory usage of the machine</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>procfs_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>the location of procfs</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>mstats the memory usage </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="142" column="8" bodyfile="procfs.c" bodystart="245" bodyend="287" declfile="procfs.h" declline="142" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="procfs_8h_1a3a7b8e342feb3d2ae29e01279c18087a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structtask__stats" kindref="compound">task_stats</ref> *</type>
        <definition>struct task_stats* pfs_create_tstats</definition>
        <argsstring>()</argsstring>
        <name>pfs_create_tstats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates memory for <ref refid="structtask__stats" kindref="compound">task_stats</ref> structs</para>
<para><simplesect kind="return"><para>tstats the <ref refid="structtask__stats" kindref="compound">task_stats</ref> structs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="159" column="17" bodyfile="procfs.c" bodystart="289" bodyend="293" declfile="procfs.h" declline="159" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="procfs_8h_1ace1568af21fee77d1ce8b68ac7460e8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pfs_destroy_tstats</definition>
        <argsstring>(struct task_stats *tstats)</argsstring>
        <name>pfs_destroy_tstats</name>
        <param>
          <type>struct <ref refid="structtask__stats" kindref="compound">task_stats</ref> *</type>
          <declname>tstats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Frees memory for <ref refid="structtask__stats" kindref="compound">task_stats</ref> structs</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tstats</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structtask__stats" kindref="compound">task_stats</ref> structs </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="167" column="6" bodyfile="procfs.c" bodystart="295" bodyend="300" declfile="procfs.h" declline="167" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="procfs_8h_1a78c77e940f997164cfe044717b5ce2e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pfs_tasks</definition>
        <argsstring>(char *proc_dir, struct task_stats *tstats)</argsstring>
        <name>pfs_tasks</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <param>
          <type>struct <ref refid="structtask__stats" kindref="compound">task_stats</ref> *</type>
          <declname>tstats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves tasks info of the machine</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>the location of procfs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tstats</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structtask__stats" kindref="compound">task_stats</ref> structs</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success, or EXIT_FAILURE if otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="177" column="5" bodyfile="procfs.c" bodystart="302" bodyend="432" declfile="procfs.h" declline="177" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Retrieves raw information from procfs, parses it, and provides easy-to-use functions for displaying the data. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_PROCFS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PROCFS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="structload__avg" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structload__avg" kindref="compound">load_avg</ref><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>one;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>five;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fifteen;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">};</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="structcpu__stats" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcpu__stats" kindref="compound">cpu_stats</ref><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>idle;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>total;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">};</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="structmem__stats" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmem__stats" kindref="compound">mem_stats</ref><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>used;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="structtask__stats" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtask__stats" kindref="compound">task_stats</ref><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>running;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>waiting;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sleeping;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stopped;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zombie;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtask__info" kindref="compound">task_info</ref><sp/>*active_tasks;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="structtask__info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtask__info" kindref="compound">task_info</ref><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>pid_t<sp/>pid;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>uid_t<sp/>uid;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>name[26];</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>state[13];</highlight></codeline>
<codeline lineno="60"><highlight class="normal">};</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="procfs_8h_1acb1112f87eb6d7023b4bc2adccebb75e" kindref="member">pfs_hostname</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hostname_buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_sz);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="procfs_8h_1aa2daa2378b2816f378f7d8d1cad39371" kindref="member">pfs_kernel_version</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*version_buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_sz);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="procfs_8h_1aa9d05ac622f7322719bbcf8302c682ad" kindref="member">pfs_cpu_model</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*model_buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_sz);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="procfs_8h_1a9b207290dee3e4fc725a6800ab2813d6" kindref="member">pfs_cpu_units</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="procfs_8h_1a22f70e07728198887b6f062716183058" kindref="member">pfs_uptime</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="procfs_8h_1a2b539d023054cb32a82cc19e9fe1d977" kindref="member">pfs_format_uptime</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*uptime_buf);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structload__avg" kindref="compound">load_avg</ref><sp/><ref refid="procfs_8h_1ad7cd36585e7dc0dd239d622c60e1df69" kindref="member">pfs_load_avg</ref>(char<sp/>*proc_dir);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="procfs_8h_1a866cac2f8014b4c83f23243ab0e01ab3" kindref="member">pfs_cpu_usage</ref>(</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*procfs_dir,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcpu__stats" kindref="compound">cpu_stats</ref><sp/>*prev,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcpu__stats" kindref="compound">cpu_stats</ref><sp/>*curr);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmem__stats" kindref="compound">mem_stats</ref><sp/><ref refid="procfs_8h_1a6cde96a5ca78eb0d37fb4c8da3c7e0b4" kindref="member">pfs_mem_usage</ref>(char<sp/>*procfs_dir);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtask__stats" kindref="compound">task_stats</ref><sp/>*<ref refid="procfs_8h_1a3a7b8e342feb3d2ae29e01279c18087a" kindref="member">pfs_create_tstats</ref>();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="procfs_8h_1ace1568af21fee77d1ce8b68ac7460e8c" kindref="member">pfs_destroy_tstats</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtask__stats" kindref="compound">task_stats</ref><sp/>*tstats);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="procfs_8h_1a78c77e940f997164cfe044717b5ce2e1" kindref="member">pfs_tasks</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtask__stats" kindref="compound">task_stats</ref><sp/>*tstats);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="procfs.h"/>
  </compounddef>
</doxygen>
